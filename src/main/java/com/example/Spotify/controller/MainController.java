package com.example.Spotify.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;

import com.example.Spotify.entities.History;
import com.example.Spotify.entities.User;
import com.example.Spotify.repositories.HistoryRepository;
import com.example.Spotify.repositories.UserRepository;



@Controller // This means that this class is a Controller
@RequestMapping(path="/spotif") // This means URL's start with /demo (after Application path)
public class MainController {
  User temp = new User();
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @Autowired
  private HistoryRepository historyRepository;

  @PostMapping(path="/user/register") // Map ONLY POST Requests
  public @ResponseBody ResponseEntity<User> addNewUser (@RequestParam String name
      , @RequestParam String email, @RequestParam String password) {
   
    try {
      User userData = new User();
      String status = "Free";
    	userData.setName(name);
      userData.setEmail(email);
      userData.setPassword(password);
      userData.setStatus(status);
        userRepository.save(userData);
        return ResponseEntity.ok(userData); 
	  }catch (Exception e) {
		  return ResponseEntity.notFound().build();
    }
  }

  @GetMapping(path="/user/{id}")
  public @ResponseBody ResponseEntity<User> getUser(@PathVariable int id) {
    try {
      User userData = userRepository.findById(id).get();
      String userEmail=userData.getEmail();
      String userName = userData.getName();
      String userPw = userData.getPassword();

      temp.setEmail(userEmail);
      temp.setName(userName);
      temp.setPassword(userPw);

      return ResponseEntity.ok(userData); 
    }catch (Exception e) {
      return ResponseEntity.notFound().build();
    }
  }

  @GetMapping(path="/user/history/{email}")
  public @ResponseBody ResponseEntity<List<History>> getUserHistory(@PathVariable String email){
    try {
      User userData = userRepository.findByEmail(email).get(0);
      List<History> historyData = historyRepository.findByUserId(userData);
      return ResponseEntity.ok(historyData); 
    }catch (Exception e) {
      return ResponseEntity.notFound().build();
    }
  }

  @PutMapping(path="/subscribe/{id}")
  public @ResponseBody ResponseEntity<User> updateUser(@PathVariable int id) {
	  try {
      User userData = userRepository.findById(id).get();
      String status = "Premium";
      userData.setStatus(status);
      userRepository.save(userData);
      return ResponseEntity.ok(userData);   
		}catch (Exception e) {
		  return ResponseEntity.notFound().build();
		}
  }
  
  @DeleteMapping(path="/user/delete/{id}")
    public @ResponseBody ResponseEntity<Void> deleteSong(@PathVariable int id){
        try {
            userRepository.deleteById(id);
            return ResponseEntity.ok().build();
        }catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
        
    }
	  
}